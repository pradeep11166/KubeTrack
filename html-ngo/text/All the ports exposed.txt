

All the ports exposed for every services

Aws login 
https://us-east-1.console.aws.amazon.com

Github
https://github.com/pradeep11166/KubeTrack


Jenkins
http://98.83.180.222:8080/


Kubernetes Dashboard
https://98.83.180.222:30220/#/login

Kubernetes Token
kubectl -n kubernetes-dashboard create token admin-user
       or 
       
eyJhbGciOiJSUzI1NiIsImtpZCI6ImRpblZMNjVQYmNjc244RFdOdGtHcVFxQ1FMVlVkamdCVF9Bd2doMzdlUHcifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzQ1MzA3NDM0LCJpYXQiOjE3NDUzMDM4MzQsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiYWM4MDE0MjYtZjY2Yy00OWFjLWFmZjYtNjQ3MDhhZjEyOWZlIn19LCJuYmYiOjE3NDUzMDM4MzQsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.hfQmmCSDtHaN5mSX9K094EXhk_nJ1yhg8malmSIhC0iAVi6tAoFz3kWxil61AdxH_Z5E2zIcOVNhKqzrctYQdFZs9DBvw_Mg23uyop_7N7E8ClRr4cp2XKr0lsC6IrH06a_-H32PSrxygtjnYuPwxMjT2rJpcHaKF6t5SBcSh3mQX_S5I8fAcBqwB8clNkZqbWFKPHpKsde_HtK26teWgbs0TR-r8QxZESuP5vK1vlbv5gO2rCbfTo3Hpc58SHl-EtN3AeRh-YiaMbugpkZW2Ufx5aN1mt3mGCl_5bAorq1WzJUdrXwQe7z4_ODCD8gqhmQ9eiSATg9VVC7BDkKtcQ    



Splunk 
http://98.83.180.222:8000/en-US/app/launcher/home


Grafana Dashboard 
http://98.83.180.222:32649/d/bejh0k9d45b7kf/kubernetes-cluster-monitoring-all-in-one?orgId=1&from=now-5m&to=now&timezone=browser&refresh=5s


Output of website 
http://98.83.180.222:30869/




new multiple 
pipeline {
    agent any

    environment {
        DOCKER_HUB_USER = 'pro1116'
        IMAGE_TAG = "${GIT_NUMBER}"  // Use Git commit hash or dynamic build tag
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/pradeep11166/KubeTrack.git'
            }
        }

        stage('Build and Push Images') {
            parallel {
                stage('Build kubetrack Image') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh '''
                            docker build -t $DOCKER_HUB_USER/kubetrack:$IMAGE_TAG -f ./Dockerfile-kubetrack .
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push $DOCKER_HUB_USER/kubetrack:$IMAGE_TAG
                            '''
                        }
                    }
                }
                stage('Build ngo Image') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh '''
                            docker build -t $DOCKER_HUB_USER/ngo:$IMAGE_TAG -f ./Dockerfile-ngo .
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push $DOCKER_HUB_USER/ngo:$IMAGE_TAG
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Path to Kubernetes deployment files
                    def kubetrackYaml = './k8s/deployment-kubetrack.yaml'
                    def ngoYaml = './k8s/deployment-ngo.yaml'

                    // Apply the latest deployment configurations
                    sh """
                    sudo systemctl restart kubelet
                    export KUBECONFIG=/var/lib/jenkins/.kube/config
                    kubectl apply -f ${kubetrackYaml} --validate=false
                    kubectl apply -f ${ngoYaml} --validate=false
                    kubectl set image deployment/kubetrack-deployment kubetrack=$DOCKER_HUB_USER/kubetrack:$IMAGE_TAG
                    kubectl set image deployment/ngo-deployment ngo=$DOCKER_HUB_USER/ngo:$IMAGE_TAG
                    kubectl rollout restart deployment kubetrack-deployment --namespace=default
                    kubectl rollout restart deployment ngo-deployment --namespace=default
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                sh 'kubectl get pods -o wide'
                sh 'kubectl get svc'
            }
        }
    }
}



jenkins pipeline

pipeline {
    agent any

    environment {
        DOCKER_HUB_USER = 'pro1116'  // Your Docker Hub username
        IMAGE_NAME = 'kubetrack'     // Docker image name
        IMAGE_TAG = 'latest'         // Tag for the image
        GIT_REPO = 'https://github.com/pradeep11166/KubeTrack.git'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG .'
                }
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                script {
                    sh """
                        docker login -u pro1116 -p @437C7FAB8cc
                        docker push pro1116/kubetrack:latest
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                        sudo systemctl restart kubelet
                        export KUBECONFIG=/var/lib/jenkins/.kube/config
                        kubectl apply -f /var/lib/jenkins/workspace/kube-track/deployment.yaml --validate=false
                        kubectl set image deployment/kubetrack-deployment kubetrack=$DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG
                        kubectl rollout restart deployment kubetrack-deployment --namespace=default

                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                }
            }
        }
    }
}

